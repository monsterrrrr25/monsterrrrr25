- 👋 Hi, I’m @monsterrrrr25
- 👀 I’m interested in ...
- 🌱 I’m currently learning ...
- 💞️ I’m looking to collaborate on ...
- 📫 How to reach me ...
- 😄 Pronouns: ...
- ⚡ Fun fact: ...

<!---
monsterrrrr25/monsterrrrr25 is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.
You can click the Preview link to take a look at your changes.
--->
// (1)提 示 使 用 者 輸 入 一 個 年 份 ， 判斷 這 個 年 份 是 否 為 閏 年 。 若 這 個 年 份 能 被4整除但不能被100整除，或者能被400整除，就是閱年，否則 不 是 閏年 。

// 讓使用者輸入一個年份
let year = parseInt(prompt("請輸入一個年份:"));

// 判斷是否為閏年
if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
    console.log(year + "年是閏年");
} else {
    console.log(year + "年不是閏年");
}


// (2) 提 示 使 用 者 輸 入 一 個 月 份 ， 然 後 輸 出 這 個 月份 所 對 應 的 天 數 。 若輸 入 的是 1 、3 、5 、7 、8 、 10 或 1 2 月 ， 就輸出 「 31 天」;若輸 入的 是 4 、 6 、 9 或 1 1 月 ， 就輸 出 「 3 0 天 」 ; 若 輸 入 的 是 2 月 ， 就輸 出 「 2 8 天 」 或 「2 9 天 」 ， 需 要 考 慮 間 年 的 情 況

// 讓使用者輸入一個月份
let month = parseInt(prompt("請輸入一個月份 (1-12):"));

// 判斷月份對應的天數
if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
    console.log("31天");
} else if (month === 4 || month === 6 || month === 9 || month === 11) {
    console.log("30天");
} else if (month === 2) {
    // 考慮閏年的情況
    let year = parseInt(prompt("請輸入一個年份:"));
    if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
        console.log("29天");
    } else {
        console.log("28天");
    }
} else {
    console.log("請輸入有效的月份 (1-12)");
}


// (3) 提示使用者輸入一國半串，然後使用f or選圈將字串反轉。

// 讓使用者輸入一個字串
let inputString = prompt("請輸入一個字串:");

// 將字串轉換為陣列，反轉，再轉回字串
let reversedString = inputString.split("").reverse().join("");

console.log("反轉後的字串:", reversedString);

// (4) 使用for選圈印出由 組成的倒直角三角形。

// 要印出的行數
let rows = 5;

// 外層迴圈控制行數
for (let i = rows; i >= 1; i--) {
    // 內層迴圈控制每行的星號數量
    for (let j = 1; j <= i; j++) {
        document.write("*");
    }
    // 換行
    document.write("<br>");
}

// (5) 使用while迴圈判斷一質數是否為質數。

// 要判斷的數字
let number = parseInt(prompt("請輸入一個數字:"));
let isPrime = true;

// 如果輸入的是小於2的數字，則它不是質數
if (number < 2) {
    isPrime = false;
} else {
    let i = 2;
    while (i <= Math.sqrt(number)) {
        if (number % i === 0) {
            isPrime = false;
            break;
        }
        i++;
    }
}

if (isPrime) {
    console.log(number + " 是質數");
} else {
    console.log(number + " 不是質數");
}

// (6) 使 用 w h i l e 迴圈 印 出 由 "*" 組 成 的倒 直 角 三 角 形 。

// 要印出的行數
let rows = 5;
let i = rows;

// 外層迴圈控制行數
while (i >= 1) {
    // 內層迴圈控制每行的星號數量
    let j = 1;
    while (j <= i) {
        document.write("*");
        j++;
    }
    // 換行
    document.write("<br>");
    i--;
}


// (7) 輸入一個正整數n，使用do...while迴圈計算n!的值(即n 的階乘)， 輸出結果。

// 讓使用者輸入一個正整數
let n = parseInt(prompt("請輸入一個正整數:"));
let factorial = 1;
let i = 1;

// 使用 do...while 迴圈計算階乘
do {
    factorial *= i;
    i++;
} while (i <= n);

// 輸出結果
console.log(n + "! = " + factorial);


// (8) 使用for...of迴圈找出陣列中的最大值，假設陳列為[1,5 ,2,7,3]

// 定義一個陣列
let array = [1, 5, 2, 7, 3];
let max = array[0]; // 假設最大值為陣列的第一個元素

// 使用 for...of 迴圈遍歷陣列，找出最大值
for (let element of array) {
    if (element > max) {
        max = element;
    }
}

// 輸出最大值
console.log("陣列中的最大值為:", max);


// (9) 使用for.. of迴圈計算陣列中所有偶數元素的總和，假設陣列為【1,2,3,4,5,6,7,8]。

// 定義一個陣列
let array = [1, 2, 3, 4, 5, 6, 7, 8];
let sum = 0;

// 使用 for...of 迴圈遍歷陣列，計算偶數元素的總和
for (let element of array) {
    if (element % 2 === 0) {
        sum += element;
    }
}

// 輸出偶數元素的總和
console.log("陣列中所有偶數元素的總和為:", sum);


// (10) 使 用f o r . . . i n 迴圈 計 算 物 件 屬 性 值 的 總 和 ， 假 設 物 件 為 {a : 1 , b : 2, c:3, d:4,e:5}。

// 定義一個物件
let obj = {a: 1, b: 2, c: 3, d: 4, e: 5};
let sum = 0;

// 使用 for...in 迴圈遍歷物件，計算屬性值的總和
for (let key in obj) {
    sum += obj[key];
}

// 輸出屬性值的總和
console.log("物件屬性值的總和為:", sum);

## Hi there ðŸ‘‹

<!--
**monsterrrrr25/monsterrrrr25** is a âœ¨ _special_ âœ¨ repository because its `README.md` (this file) appears on your GitHub profile.

Here are some ideas to get you started:

- ðŸ”­ Iâ€™m currently working on ...
- ðŸŒ± Iâ€™m currently learning ...
- ðŸ‘¯ Iâ€™m looking to collaborate on ...
- ðŸ¤” Iâ€™m looking for help with ...
- ðŸ’¬ Ask me about ...
- ðŸ“« How to reach me: ...
- ðŸ˜„ Pronouns: ...
- âš¡ Fun fact: ...
-->
function calculateAverage(...numbers) {
    const sum = numbers.reduce((acc, num) => acc + num, 0);
    return numbers.length === 0 ? 0 : sum / numbers.length;
}

// æ¸¬è©¦
console.log(calculateAverage(1, 2, 3, 4, 5)); // 3
console.log(calculateAverage(10, 20, 30)); // 20
console.log(calculateAverage()); // 0
function isPrime(number) {
    if (number <= 1) return false;
    for (let i = 2; i <= Math.sqrt(number); i++) {
        if (number % i === 0) return false;
    }
    return true;
}

// æ¸¬è©¦
console.log(isPrime(2)); // true
console.log(isPrime(3)); // true
console.log(isPrime(4)); // false
console.log(isPrime(17)); // true
function findMinMax(array) {
    if (array.length === 0) return { min: null, max: null };
    let min = array[0];
    let max = array[0];
    for (let i = 1; i < array.length; i++) {
        if (array[i] < min) min = array[i];
        if (array[i] > max) max = array[i];
    }
    return { min, max };
}

// æ¸¬è©¦
console.log(findMinMax([1, 2, 3, 4, 5])); // { min: 1, max: 5 }
console.log(findMinMax([10, -5, 7, 99, 0])); // { min: -5, max: 99 }
console.log(findMinMax([])); // { min: null, max: null }
function findMinMax(array) {
    if (array.length === 0) return { min: null, max: null };
    let min = array[0];
    let max = array[0];
    for (let i = 1; i < array.length; i++) {
        if (array[i] < min) min = array[i];
        if (array[i] > max) max = array[i];
    }
    return { min, max };
}

// æ¸¬è©¦
console.log(findMinMax([1, 2, 3, 4, 5])); // { min: 1, max: 5 }
console.log(findMinMax([10, -5, 7, 99, 0])); // { min: -5, max: 99 }
console.log(findMinMax([])); // { min: null, max: null }
function fibonacciIterative(n) {

    if (n <= 0) return 0;
    if (n === 1) return 1;

    let a = 0;
    let b = 1;
    let temp;

    for (let i = 2; i <= n; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }

    return b;
}

function gcdRecursive(a, b) {
    if (b === 0) return a;
    return gcdRecursive(b, a % b);
}
